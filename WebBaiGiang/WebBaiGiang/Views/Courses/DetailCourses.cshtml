@using WebBaiGiang.ViewModel
@model LopHocViewModel

@{
    if (User.IsInRole("Student"))
    {
        Layout = "~/Views/Shared/_LayoutSinhvien.cshtml";
    }
    else if (User.IsInRole("Teacher"))
    {
        Layout = "~/Views/Shared/_LayoutGiangvien.cshtml";
    }
    var returnUrl = Url.Action("DetailCourses", "Courses", new { id = Model.Id });

}


<div class="conTent">
    <h3>lớp học > @Model.Name</h3>
</div>

<style>
    /* Container chính */
    .conTent h3 {
    margin-left: 70px;
    margin-top: 10px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-weight: 700;
    font-size: 28px;
    color: #333;
    }

    .dropdown-box {
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    border-radius: 8px;
    }
    /* Search + dropdown + button */
    .search-filter {
    margin: 30px 0 20px 0;
    display: flex;
    align-items: center;
    gap: 20px;
    flex-wrap: wrap;
    padding: 0 20px;
    }

    .search-input-wrapper {
    position: relative;
    display: inline-block;
    }

    .search-icon {
    position: absolute;
    top: 50%;
    left: 12px;
    transform: translateY(-50%);
    width: 18px;
    height: 18px;
    opacity: 0.5;
    z-index: 2;
    }

    .search-input-courses {
    padding: 12px 15px 12px 40px;
    border: 2px solid #e1e5e9;
    border-radius: 25px;
    font-size: 14px;
    width: 280px;
    transition: all 0.3s ease;
    background-color: #fff;
    }

    .search-input-courses:focus {
    outline: none;
    border-color: #1a73e8;
    box-shadow: 0 0 0 3px rgba(26, 115, 232, 0.1);
    }

    /* Dropdown cải tiến */
    .dropdown {
    position: relative;
    display: inline-block;
    }

    .dropdown-button {
    padding: 12px 20px;
    border: 2px solid #1a73e8;
    border-radius: 8px;
    background-color: white;
    color: #1a73e8;
    font-weight: 600;
    font-size: 14px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
    min-width: 140px;
    justify-content: space-between;
    }

    .dropdown-button:hover {
    background-color: #1a73e8;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(26, 115, 232, 0.3);
    }

    .arrow-down {
    font-size: 10px;
    transition: transform 0.3s ease;
    }

    .dropdown.show .arrow-down {
    transform: rotate(180deg);
    }

    .dropdown-content {
    display: none;
    position: absolute;
    top: calc(100% + 8px);
    left: 0;
    background-color: #fff;
    border: 1px solid #e1e5e9;
    border-radius: 12px;
    min-width: 180px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    overflow: hidden;
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    }

    .dropdown.show .dropdown-content {
    display: block;
    opacity: 1;
    transform: translateY(0);
    }

    .dropdown-content a {
    display: block;
    padding: 12px 16px;
    color: #333;
    text-decoration: none;
    font-size: 14px;
    transition: all 0.2s ease;
    }

    .dropdown-content a:hover {
    background-color: #f8f9fa;
    color: #1a73e8;
    padding-left: 20px;
    }

    /* Nút tạo bài giảng */
    .create-baigiang-button {
    background: linear-gradient(135deg, #1a73e8, #1557b0);
    color: white;
    padding: 12px 24px;
    font-weight: 600;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(26, 115, 232, 0.3);
    }

    .create-baigiang-button:hover {
    background: linear-gradient(135deg, #1557b0, #0f4c8c);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(26, 115, 232, 0.4);
    }

    /* Tabs cải tiến */
    .custom-tabs {
    display: flex;
    gap: 0;
    margin: 40px 0 0 60px;
    border-bottom: 2px solid #e1e5e9;
    padding-bottom: 0;
    }

    .tab-button {
    padding: 15px 25px;
    background-color: transparent;
    border: none;
    border-bottom: 3px solid transparent;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    color: #666;
    font-size: 15px;
    position: relative;
    }

    .tab-button:hover {
    color: #1a73e8;
    background-color: rgba(26, 115, 232, 0.05);
    }

    .tab-button.active {
    color: #1a73e8;
    border-bottom-color: #1a73e8;
    background-color: rgba(26, 115, 232, 0.05);
    }

    .tab-section {
    display: none;
    margin-left: 60px;
    margin-top: 30px;
    }

    .tab-section.active {
    display: block;
    }

    /* Header banner cải tiến */
    .header-banner {
    background: linear-gradient(135deg, #1a73e8, #1557b0);
    color: white;
    padding: 3rem 2rem;
    border-radius: 16px;
    background-size: cover;
    background-position: center;
    min-height: 220px;
    display: flex;
    align-items: flex-end;
    max-width: 90%;
    margin: 30px auto;
    box-shadow: 0 8px 32px rgba(26, 115, 232, 0.3);
    position: relative;
    overflow: hidden;
    }

    .header-banner::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(26, 115, 232, 0.1), rgba(21, 87, 176, 0.2));
    z-index: 1;
    }

    .class-title {
    font-size: 32px;
    font-weight: 700;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    z-index: 2;
    position: relative;
    }

    /* Post items cải tiến */
    .post-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #e1e5e9;
    padding: 20px 0;
    max-width: 90%;
    transition: all 0.3s ease;
    }

    .post-item:hover {
    background-color: rgba(26, 115, 232, 0.02);
    border-radius: 8px;
    padding-left: 15px;
    padding-right: 15px;
    margin: 0 -15px;
    }

    .post-left {
    display: flex;
    align-items: center;
    gap: 15px;
    }

    .icon-circle {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    background: linear-gradient(135deg, #28a745, #20c997);
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
    }

    .post-left a {
    font-size: 16px;
    font-weight: 600;
    color: #333;
    text-decoration: none;
    transition: color 0.3s ease;
    }

    .post-left a:hover {
    color: #1a73e8;
    }

    .text-muted {
    font-size: 13px;
    color: #666;
    margin-right: 15px;
    }

    /* Dropdown menu cho actions - SỬA LỖI HOVER */
    .post-item .dropdown {
    position: relative;
    }

    .icon-three-dots {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    color: #666;
    font-size: 18px;
    }

    .icon-three-dots:hover {
    background-color: #f8f9fa;
    color: #333;
    }

    .icon-three-dots::before {
    content: "⋮";
    font-size: 20px;
    font-weight: bold;
    }

    .post-item .dropdown-content {
    display: none;
    position: absolute;
    right: 0;
    top: calc(100% + 5px);
    background-color: #fff;
    min-width: 160px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    z-index: 1001;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid #e1e5e9;
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    }

    /* Sử dụng JavaScript thay vì hover CSS */
    .post-item .dropdown.show .dropdown-content {
    display: block;
    opacity: 1;
    transform: translateY(0);
    }

    .post-item .dropdown-content a,
    .post-item .dropdown-content button {
    padding: 12px 16px;
    display: block;
    text-decoration: none;
    color: #333;
    background: none;
    border: none;
    text-align: left;
    width: 100%;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s ease;
    }

    .post-item .dropdown-content a:hover,
    .post-item .dropdown-content button:hover {
    background-color: #f8f9fa;
    color: #1a73e8;
    padding-left: 20px;
    }

    .post-item .dropdown-content button.text-danger:hover {
    color: #dc3545;
    background-color: rgba(220, 53, 69, 0.1);
    }

    /* Pagination cải tiến */
    .pagination {
    list-style: none;
    padding: 0;
    display: flex;
    gap: 8px;
    justify-content: center;
    margin: 40px 0;
    }

    .pagination li {
    display: inline;
    }

    .pagination a,
    .pagination span {
    display: inline-block;
    padding: 10px 15px;
    border-radius: 8px;
    background-color: #f8f9fa;
    color: #333;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    border: 1px solid #e1e5e9;
    }

    .pagination a:hover {
    background-color: #e9ecef;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .pagination .active span {
    background-color: #1a73e8;
    color: white;
    font-weight: 600;
    border-color: #1a73e8;
    box-shadow: 0 2px 8px rgba(26, 115, 232, 0.3);
    }


    .search-input-courses {
    width: 100%;
    }

    .custom-tabs {
    margin-left: 20px;
    overflow-x: auto;
    }

    .tab-section {
    margin-left: 20px;
    }

    .conTent h3 {
    margin-left: 20px;
    font-size: 24px;
    }

    .header-banner {
    margin-left: 20px;
    margin-right: 20px;
    max-width: calc(100% - 40px);
    }

    select.form-select {
    max-width: 400px;
    }

    .pagination li.active span {
    background-color: #0d6efd;
    color: white;
    border-radius: 6px;
    padding: 5px 10px;
    }

    .pagination li {
    display: inline-block;
    margin-right: 5px;
    }

    .pagination a {
    text-decoration: none;
    color: #0d6efd;
    }

    .pagination a:hover {
    text-decoration: underline;
    }
</style>



<!-- Tabs -->
<div class="custom-tabs">
    <button class="tab-button active" data-tab="contentTab"> Nội dung</button>
    <button class="tab-button" data-tab="exerciseTab">Bài tập & Điểm</button>
    <button class="tab-button" data-tab="peopleTab">Mọi người </button>
</div>

<!-- Banner -->
<div class="header-banner" style="background-image: url('@Model.Picture');">
    <h3 class="class-title text-white">@Model.Name</h3>
</div>

<!-- Tab: Mọi người -->
<div id="peopleTab" class="tab-section">
    @Html.Partial("_ThemNguoiPartial", new InviteUsersViewModel
{
    ClassId = Model.Id,
    Students = Model.Students,
    Teachers = Model.Teachers// phải chắc chắn Model.Students có dữ liệu
})
</div>
<!-- Tab: Bài tập -->
<div id="exerciseTab" class="tab-section">
    @Html.Partial("BaiTap", Model.BaiTaps)
    @await Html.PartialAsync("_ConfirmModal", new ConfirmModalViewModel
{
    ModalId = "confirmDeleteBaiTapModal",
    Message = "Bạn có chắc muốn xóa bài tập này?",
    ActionUrl = Url.Action("XoaBaiTap", "Courses"),
    DataId = 0,
    IncludeLopHocId = true
})

    <!-- PHÂN TRANG BÀI TẬP -->
    @if (Model.BaiTaps != null && Model.BaiTaps.TotalPages > 1)
    {
        <ul class="pagination">
            @if (Model.BaiTaps.HasPreviousPage)
            {
                <li>
                    <a href="@Url.Action("DetailCourses", new { id = Model.Id, page = Model.BaiTaps.PageIndex - 1 })#exerciseTab">← Trước</a>
                </li>
            }

            @for (int i = 1; i <= Model.BaiTaps.TotalPages; i++)
            {
                if (i == Model.BaiTaps.PageIndex)
                {
                    <li class="active"><span>@i</span></li>
                }
                else
                {
                    <li>
                        <a href="@Url.Action("DetailCourses", new { id = Model.Id, page = i })#exerciseTab">@i</a>
                    </li>
                }
            }

            @if (Model.BaiTaps.HasNextPage)
            {
                <li>
                    <a href="@Url.Action("DetailCourses", new { id = Model.Id, page = Model.BaiTaps.PageIndex + 1 })#exerciseTab">Sau →</a>
                </li>
            }
        </ul>
    }
</div>

<!-- Tab: Nội dung (Bài giảng) -->
<div id="contentTab" class="tab-section active">
    <div class="search-filter mb-3">
        <div class="search-input-wrapper">
            <img src="~/img/loupe.png" class="search-icon" />
            <input type="text" placeholder="Tìm kiếm bài giảng..." class="search-input-courses" />
        </div>

        @if (User.IsInRole("Teacher"))
        {
            <button class="btn btn-primary create-baigiang-button"
                    onclick="location.href='@Url.Action("TaoBaiGiang", "GiangVien", new {
                classId = Model.Id,
                returnUrl = Url.Action("DetailCourses", "Courses", new { id = Model.Id })
            })'">
                ➕ Tạo bài giảng
            </button>
        }

        @if (Model.BaiGiangsChuaCo?.Any() == true)
        {
            <div class="position-relative d-inline-block">
                <button class="btn btn-primary" type="button" style="padding: 10px 10px;" onclick="toggleAddForm()">➕ Thêm bài giảng vào lớp</button>

                <div id="addFormContainer" class="dropdown-box p-3 shadow-sm border rounded bg-white mt-2" style="display: none; min-width: 280px; position: absolute; z-index: 1000;">
                    <form asp-action="ThemBaiGiangVaoLop" asp-controller="Courses" method="post">
                        <input type="hidden" name="lopHocId" value="@Model.Id" />
                        <select name="selectedBaiGiangIds" class="form-select mb-2" multiple size="5">
                            @foreach (var bg in Model.BaiGiangsChuaCo)
                            {
                                <option value="@bg.Id">@bg.Title</option>
                            }
                        </select>
                        <button type="submit" class="btn btn-success w-100">Xác nhận thêm</button>
                    </form>
                </div>
            </div>

        }
        else
        {
            <div class="alert alert-info mt-4">Tất cả bài giảng đã được gán cho lớp này.</div>
        }

    </div>

    <div class="container mt-4" style="max-width: 90%;">
        @foreach (var item in Model.BaiGiangs)
        {
            <div class="post-item">
                <div class="post-left">
                    <div class="icon-circle">
                        <i class="bi bi-journal-richtext fs-5"></i>
                    </div>
                    @if (User.IsInRole("Student"))
                    {
                        <a asp-action="ChiTietBaiGiang" asp-controller="SinhVien" asp-route-id="@item.Id">
                            @item.Title
                        </a>
                    }
                    else
                    {
                        <a asp-action="ChiTietBaiGiang" asp-controller="GiangVien" asp-route-id="@item.Id">
                            @item.Title
                        </a>
                    }
                </div>
                <div style="display:flex; align-items:center;">
                    <span class="text-muted">Đã đăng vào @item.CreatedDate.ToString("HH:mm dd/MM/yyyy")</span>
                    @if (User.IsInRole("Teacher"))
                    {
                        <div class="dropdown" data-dropdown-id="@item.Id">
                            <div class="icon-three-dots" onclick="togglePostDropdown(@item.Id)"></div>
                            <div class="dropdown-content">
                                <button type="button" onclick="showConfirmModalById('confirmDeleteBaiGiangModal', @item.Id, @Model.Id, '/Courses/DetailCourses/@Model.Id#contentTab')">Xóa</button>

                            </div>

                        </div>
                    }
                </div>
            </div>
        }
    </div>
    @await Html.PartialAsync("_ConfirmModal", new ConfirmModalViewModel
{
    ModalId = "confirmDeleteBaiGiangModal",
    Message = "Bạn có chắc muốn xóa bài giảng?",
    ActionUrl = Url.Action("XoaBaiGiang", "GiangVien"),
    ConfirmButtonText = "XÓA",
    CancelButtonText = "HỦY",
    DataId = 0,
    IncludeLopHocId = true
})


    <!-- PHÂN TRANG -->
    @if (Model.BaiGiangs != null && Model.BaiGiangs.TotalPages > 1)
    {
        <ul class="pagination">
            @if (Model.BaiGiangs.HasPreviousPage)
            {
                <li>
                    <a href="@Url.Action("DetailCourses", new { id = Model.Id, page = Model.BaiGiangs.PageIndex - 1 })">← Trước</a>
                </li>
            }

            @for (int i = 1; i <= Model.BaiGiangs.TotalPages; i++)
            {
                if (i == Model.BaiGiangs.PageIndex)
                {
                    <li class="active"><span>@i</span></li>
                }
                else
                {
                    <li>
                        <a href="@Url.Action("DetailCourses", new { id = Model.Id, page = i })">@i</a>
                    </li>
                }
            }

            @if (Model.BaiGiangs.HasNextPage)
            {
                <li>
                    <a href="@Url.Action("DetailCourses", new { id = Model.Id, page = Model.BaiGiangs.PageIndex + 1 })">Sau →</a>
                </li>
            }
        </ul>
    }
</div>

<!-- JavaScript cải tiến -->
<script>
        function showConfirmModalById(modalId, courseId = null) {
        const modal = document.getElementById(modalId);
        if (!modal) return;

        const inputId = modal.querySelector("input[name='id']");
        if (inputId && courseId !== null) inputId.value = courseId;

        modal.classList.add("show");
    }

    // Tab handling
    document.querySelectorAll(".tab-button").forEach(button => {
        button.addEventListener("click", function () {
            document.querySelectorAll(".tab-button").forEach(btn => btn.classList.remove("active"));
            this.classList.add("active");

            document.querySelectorAll(".tab-section").forEach(section => section.classList.remove("active"));
            const tabId = this.getAttribute("data-tab");
            document.getElementById(tabId).classList.add("active");
        });
    });

    // Hash handling for direct tab links
    document.addEventListener("DOMContentLoaded", function () {
        const hash = window.location.hash;
        if (hash) {
            const tab = document.querySelector(`.tab-button[data-tab="${hash.substring(1)}"]`);
            if (tab) tab.click();
        }
    });

    // Filter dropdown toggle
    function toggleDropdown() {
        const dropdown = document.getElementById('filterDropdown');
        dropdown.classList.toggle('show');
    }

    // Post action dropdown toggle - SỬA LỖI HOVER
    function togglePostDropdown(itemId) {
        // Đóng tất cả dropdown khác
        document.querySelectorAll('.post-item .dropdown.show').forEach(dropdown => {
            if (dropdown.getAttribute('data-dropdown-id') != itemId) {
                dropdown.classList.remove('show');
            }
        });

        // Toggle dropdown hiện tại
        const dropdown = document.querySelector(`[data-dropdown-id="${itemId}"]`);
        dropdown.classList.toggle('show');
    }

    // Filter function
    function filterCourses(type) {
        const filterTexts = {
            'newest': '🆕 Mới nhất',
            'oldest': '📅 Cũ nhất',
            'incomplete': '⏳ Chưa hoàn thành',
            'completed': '✅ Đã hoàn thành'
        };

        document.getElementById('selected-filter').textContent = filterTexts[type];
        document.getElementById('filterDropdown').classList.remove('show');

        // Add your filtering logic here
        console.log('Filtering by:', type);
    }

    // Close dropdowns when clicking outside
    document.addEventListener('click', function(event) {
        // Close filter dropdown
        if (!event.target.closest('#filterDropdown')) {
            document.getElementById('filterDropdown').classList.remove('show');
        }

        // Close post action dropdowns
        if (!event.target.closest('.post-item .dropdown')) {
            document.querySelectorAll('.post-item .dropdown.show').forEach(dropdown => {
                dropdown.classList.remove('show');
            });
        }
    });

    // Search functionality
    document.querySelector('.search-input-courses').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const posts = document.querySelectorAll('.post-item');

        posts.forEach(post => {
            const title = post.querySelector('a').textContent.toLowerCase();
            if (title.includes(searchTerm)) {
                post.style.display = 'flex';
            } else {
                post.style.display = 'none';
            }
        });
    });

     function toggleAddForm() {
         const form = document.getElementById("addFormContainer");
         form.style.display = (form.style.display === "none") ? "block" : "none";
     }
     document.addEventListener('click', function (e) {
        const button = document.querySelector('button[onclick="toggleAddForm()"]');
        const formContainer = document.getElementById('addFormContainer');

        if (!formContainer.contains(e.target) && !button.contains(e.target)) {
            formContainer.style.display = 'none';
        }
    });
            function showConfirmDeleteBaiGiang(baiGiangId, lopHocId) {
        const modal = document.getElementById("confirmDeleteBaiGiangModal");
        const form = modal.querySelector("form");

        form.querySelector("input[name='id']").value = baiGiangId;
        form.querySelector("input[name='lopHocId']").value = lopHocId;
        form.querySelector("input[name='returnUrl']").value = `/Courses/DetailCourses/${lopHocId}#contentTab`;

        modal.classList.add("show");

        modal.addEventListener("click", function (e) {
            if (e.target === modal) modal.classList.remove("show");
        });

        modal.querySelector(".cancel-btn").addEventListener("click", function () {
            modal.classList.remove("show");
        });
    }

</script>
