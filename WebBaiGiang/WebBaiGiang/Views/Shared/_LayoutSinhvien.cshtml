@using System.Security.Claims
@using WebBaiGiang.ViewModel
@inject WebBaiGiang.Models.WebBaiGiangContext _context

@{
    Layout = null;

    var avatar = User.FindFirst("Avatar")?.Value;
    var name = User.FindFirst(ClaimTypes.Name)?.Value ?? "Sinh viên";
    var defaultAvatarPath = "/img/default-avatar.jpg";
    var thongTin = _context.ThongTinWebs.FirstOrDefault();
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Trang Sinh viên - @ViewData["Title"]</title>

    <!-- Bootstrap & Icon -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

    <!-- Custom CSS -->
    <link href="~/css/sinhvien.css" rel="stylesheet" />
    <link href="~/css/custom-modal.css" rel="stylesheet" />
</head>
<body class="layout-sinhvien">


    <!-- HEADER -->
    <div class="header-top d-flex justify-content-between align-items-center px-4 py-2 bg-light shadow-sm">
        <div class="navbar-logo">
            <a href="@Url.Action("Index", "Home")" class="logo d-flex align-items-center">
                @if (!string.IsNullOrEmpty(thongTin?.LogoUrl))
                {
                    <img src="@thongTin.LogoUrl" alt="Logo" class="img-fluid rounded" style="height: 70px;" />
                }
                else
                {
                    <h1 class="sitename">Logo</h1>
                }
            </a>
        </div>

        <div class="d-flex align-items-center gap-3">
            <!-- Bell Icon -->
            <div class="notification-dropdown position-relative me-3">
                <button id="notificationToggle" class="btn btn-light position-relative">
                    <i class="bi bi-bell fs-5"></i>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                          id="notificationBadge">0</span>
                </button>

                <div class="dropdown-menu shadow-sm p-2" id="notificationList"
                     style="width: 320px; max-height: 400px; overflow-y: auto; display: none;">
                    <div class="text-center text-muted small">Đang tải thông báo...</div>
                </div>
            </div>


            <!-- Avatar dropdown -->
            <div class="custom-dropdown">
                <button class="avatar-button" type="button" id="dropdownUserToggle">
                    <img src="@Url.Content(!string.IsNullOrEmpty(avatar) ? avatar : defaultAvatarPath)" alt="Avatar" class="avatar-img" />
                    <span class="ms-1 d-none d-sm-inline" style="color:black">@name</span>
                </button>
                <ul class="custom-dropdown-menu" id="dropdownUserMenu">
                    <li>
                        <a class="custom-dropdown-item" href="@Url.Action("Profile", "Account")">
                            <i class="bi bi-person-circle me-2"></i> Tài khoản
                        </a>
                    </li>
                    <li><hr class="custom-dropdown-divider" /></li>
                    <li>
                        <a class="custom-dropdown-item text-danger" id="logoutLink" href="#">
                            <i class="bi bi-box-arrow-right me-2"></i> Đăng xuất
                        </a>
                    </li>
                </ul>
            </div>
        </div>

    </div>

    <!-- MAIN LAYOUT -->
    <div class="d-flex main-wrapper">
        <!-- SIDEBAR -->
        <nav class="sidebar" id="sidebar">
            <ul class="nav flex-column">
                <li class="nav-item">
                    <a class="nav-link @(Context.Request.Path.Value.Contains("/SinhVien/Courses") ? "active" : "")"
                       href="@Url.Action("Courses", "SinhVien")">
                        <i class="bi bi-journal-bookmark"></i> Lớp học của tôi
                    </a>
                </li>
               
            </ul>
        </nav>

        <!-- MAIN CONTENT -->
        <main class="flex-fill main-content-area">
            @RenderBody()
            @await Html.PartialAsync("_Toast")
        </main>
        <script>
            function showRealtimePopup(message, type = "success") {
                const wrapper = document.querySelector('.popup-toast-wrapper');
                if (!wrapper) return;

                const toast = document.createElement('div');
                toast.className = `popup-toast ${type}`;
                toast.innerHTML = `
                    <i class="bi ${type === 'error' ? 'bi-x-circle' : 'bi-check-circle'}"></i> ${message}
                    <button type="button" class="btn-close toast-close-btn" aria-label="Close"></button>
                `;

                // Thêm vào wrapper
                wrapper.appendChild(toast);

                // Tự động biến mất sau 3s
                setTimeout(() => {
                    toast.remove();
                }, 3000);

                // Xử lý khi bấm nút close
                toast.querySelector('.toast-close-btn').addEventListener('click', () => {
                    toast.remove();
                });
            }
        </script>

    </div>

    <!-- FOOTER -->
    @if (thongTin != null)
    {
        @await Html.PartialAsync("_Footer", thongTin)
    }

    @await Html.PartialAsync("_ConfirmModal", new ConfirmModalViewModel
{
    ModalId = "logoutModal",
    Message = "Bạn có muốn đăng xuất không?",
    ActionUrl = Url.Action("Logout", "Account")
})

    @RenderSection("Scripts", required: false)
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

</body>
</html>
<script>
        function showToast(message) {
        const toast = document.getElementById('notificationToast');
        const body = document.getElementById('notificationToastBody');
        body.textContent = message;
        toast.style.display = 'block';
        setTimeout(() => { hideToast(); }, 4000);
    }

    function hideToast() {
        const toast = document.getElementById('notificationToast');
        toast.style.display = 'none';
    }

    document.addEventListener('DOMContentLoaded', function () {
        const dropdownToggle = document.getElementById('dropdownUserToggle');
        const dropdownMenu = document.getElementById('dropdownUserMenu');
        const logoutLink = document.getElementById('logoutLink');
        const logoutModal = document.getElementById('logoutModal');
        const confirmBtn = document.getElementById('confirmLogoutBtn');
        const cancelBtn = document.getElementById('cancelLogoutBtn');

        // Toggle dropdown
        if (dropdownToggle && dropdownMenu) {
            dropdownToggle.addEventListener('click', function (e) {
                dropdownMenu.classList.toggle('show');
                e.stopPropagation();
            });

            document.addEventListener('click', function (e) {
                if (!dropdownToggle.contains(e.target) && !dropdownMenu.contains(e.target)) {
                    dropdownMenu.classList.remove('show');
                }
            });
        }

        // Mở modal xác nhận đăng xuất
        if (logoutLink && logoutModal) {
            logoutLink.addEventListener('click', function (e) {
                e.preventDefault();
                logoutModal.classList.add('show');
            });
        }

        // Đóng modal khi bấm nút hủy
        if (cancelBtn && logoutModal) {
            cancelBtn.addEventListener('click', function () {
                logoutModal.classList.remove('show');
            });
        }

        // Đóng modal nếu click ra ngoài vùng modal
        if (logoutModal) {
            logoutModal.addEventListener('click', function (e) {
                if (e.target === logoutModal) {
                    logoutModal.classList.remove('show');
                }
            });
        }
    });
</script>
<script>
    async function initNotifications() {
        const bell = document.getElementById('notificationToggle');
        const list = document.getElementById('notificationList');
        const badge = document.getElementById('notificationBadge');

        function updateBadge(count) {
            const safeCount = Math.max(0, count);
            badge.textContent = safeCount;
            badge.classList.toggle('d-none', safeCount === 0);
        }

        async function fetchUnreadCountAndUpdateBadge() {
            try {
                const res = await fetch('/ThongBao/GetThongBao');
                const data = await res.json();
                const unreadCount = data.filter(tb => !tb.daDoc).length;
                updateBadge(unreadCount);
                return data;
            } catch (err) {
                console.error('Không thể tải thông báo:', err);
                return [];
            }
        }

        await fetchUnreadCountAndUpdateBadge();

        //  Xử lý khi click chuông
        bell.addEventListener('click', async function () {
            list.style.display = list.style.display === 'block' ? 'none' : 'block';

            if (list.style.display === 'block') {
                const data = await fetchUnreadCountAndUpdateBadge();

                list.innerHTML = '';
                data.forEach(tb => {
                    const item = document.createElement('a');
                    item.href = tb.lienKet || '#';
                    item.className = `dropdown-item small ${tb.daDoc ? 'read' : 'unread'}`;
                    item.innerHTML = `
                        ${tb.noiDung}
                        <br><small class="text-muted">${new Date(tb.thoiGian).toLocaleString()}</small>
                    `;

                    item.addEventListener('click', async function (e) {
                        e.preventDefault();

                        if (!tb.daDoc) {
                            await fetch('/ThongBao/DanhDauDaDoc?id=' + tb.id, { method: 'POST' });
                            await fetchUnreadCountAndUpdateBadge();
                            item.classList.remove('unread');
                            item.classList.add('read');
                        }

                        if (tb.lienKet) {
                            window.location.href = tb.lienKet;
                        }
                    });

                    list.appendChild(item);
                });
            }
        });

        // 📡 Realtime từ SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/thongBaoHub")
            .build();

            connection.on("NhanThongBao", (data) => {
        const item = document.createElement('a');
        item.href = data.link || '#';
        item.className = 'dropdown-item small unread';
        item.innerHTML = `
            ${data.tieuDe}
            <br><small class="text-muted">${data.thoiGian}</small>
        `;

        item.addEventListener('click', async function (e) {
            e.preventDefault();

            try {
                await fetch('/ThongBao/DanhDauDaDocTheoLink?link=' + encodeURIComponent(data.link), { method: 'POST' });
                await fetchUnreadCountAndUpdateBadge();

                item.classList.remove('unread');
                item.classList.add('read');

                window.location.href = data.link;
            } catch (err) {
                console.error("Lỗi đánh dấu đã đọc:", err);
            }
        });

        // Nếu dropdown đang mở thì thêm vào list
        if (list.style.display === 'block') {
            list.prepend(item);
        }

        // Luôn cập nhật badge
         const current = parseInt(badge.textContent || "0");
    updateBadge(current + 1);

        // Nếu dropdown đang đóng, hiện toast báo
        if (list.style.display !== 'block') {
            showRealtimePopup(data.tieuDe, 'success'); // hoặc 'error' nếu có loại

        }
    });

        connection.start().catch(err => console.error(err));
        document.addEventListener('click', function (e) {
            if (!bell.contains(e.target) && !list.contains(e.target)) {
                list.style.display = 'none';
            }
        });
    }

    document.addEventListener('DOMContentLoaded', initNotifications);
</script>




