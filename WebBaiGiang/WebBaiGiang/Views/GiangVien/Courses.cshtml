@using WebBaiGiang.ViewModel
@model PhanTrang<WebBaiGiang.Models.LopHoc>

@{
    Layout = "~/Views/Shared/_LayoutGiangvien.cshtml";
}

<link href="~/css/courses.css" rel="stylesheet" />
<link href="~/css/pagination.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<style>
    .course-dropdown {
        position: absolute;
        top: 0;
        right: 0;
        margin: 8px;
        z-index: 1000;
    }

    .dropdown-toggle {
        background: none;
        border: none;
        color: white;
        font-size: 1.25rem;
        cursor: pointer;
        padding: 0;
    }

    .dropdown-menu {
        display: none;
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        min-width: 120px;
        z-index: 1001;
    }

        .dropdown-menu.show {
            display: block;
        }

    .dropdown-item {
        padding: 8px 12px;
        color: #333;
        font-size: 14px;
        text-decoration: none;
        display: block;
        width: 100%;
    }

    .dropdown-item-hide {
        color: red;
    }
</style>

<div class="conTent">
    <h3>Lớp học</h3>
</div>

@await Html.PartialAsync("_Toast")

<div class="search-filter">
    <form asp-action="Courses" method="get" class="search-form">
        <img src="~/img/loupe.png" class="search-icon" />
        <input type="text" name="search" value="@ViewBag.Search" placeholder="Tìm lớp học..." class="search-input-courses" />
        <select name="SubjectsId" class="form-select" style="min-width: 100px;" onchange="this.form.submit()">
            <option value="">-- Tất cả học phần --</option>
            @foreach (var hp in (List<WebBaiGiang.Models.HocPhan>)ViewBag.HocPhans)
            {
                <option value="@hp.Id" selected="@(hp.Id == (ViewBag.SubjectsId ?? 0) ? "selected" : null)">
                    @hp.Name
                </option>
            }
        </select>
    </form>
    

    <button class="create-course-button" onclick="location.href='@Url.Action("CreateCourses", "GiangVien")'">Tạo lớp học phần</button>
</div>

<div class="container">
    <div class="courses-wrapper">
        @if (Model != null && Model.Any())
        {
            foreach (var course in Model)
            {
                var shortCode = !string.IsNullOrWhiteSpace(course.Name)
                ? (course.Name.Contains(" ")
                ? string.Concat(course.Name.Split(" ", StringSplitOptions.RemoveEmptyEntries).Select(w => w[0])).ToUpper()
                : course.Name.Substring(0, Math.Min(4, course.Name.Length)).ToUpper())
                : "LH";

                var rand = new Random(course.Id); // Giữ màu ổn định
                var bgColors = new[] { "#1abc9c", "#3498db", "#e67e22", "#9b59b6", "#f39c12", "#2ecc71", "#e74c3c" };
                var randomColor = bgColors[rand.Next(bgColors.Length)];

                var joinLink = Url.Action("Join", "Courses", new { code = course.JoinCode }, Context.Request.Scheme);
                <div class="course-card position-relative">
                    <div class="course-dropdown">
                        <button class="btn btn-link text-white p-0" type="button" onclick="toggleCourseDropdown(this)">
                            <i class="bi bi-three-dots-vertical fs-5"></i>
                        </button>

                        <div class="dropdown-menu">
                            <a class="dropdown-item" asp-controller="Courses" asp-action="DetailCourses" asp-route-id="@course.Id">Vào lớp</a>
                            <a class="dropdown-item" href="javascript:void(0)" onclick="showCopyLinkModal('@joinLink')">Chia sẻ lớp học</a>
                            <a class="dropdown-item" asp-action="EditCourses" asp-route-id="@course.Id">Chỉnh sửa</a>

                            <!-- Nút lưu trữ -->
                            <button type="button" class="dropdown-item dropdown-item-hide" onclick="showConfirmArchiveModal(@course.Id)">
                                Lưu trữ
                            </button>


                        </div>
                    </div>

                    <a href="@Url.Action("DetailCourses", "Courses", new { id = course.Id })" class="course-link">
                        <div class="course-image">
                            @if (!string.IsNullOrWhiteSpace(course.Picture))
                            {
                                <img src="@course.Picture" alt="Ảnh bìa lớp học" onerror="this.src='/img/default-course.jpg'" />
                            }
                            else
                            {
                                <div style="background-color: @randomColor; color: white; font-size: 24px; font-weight: bold;
                                display: flex; align-items: center; justify-content: center; height: 160px; border-radius: 10px;">
                                    @shortCode
                                </div>
                            }
                        </div>
                        <div class="course-content">
                            <h4>@course.Name</h4>
                            @Html.Raw(course.Description)
                        </div>
                    </a>

                </div>
            }
        }
        else
        {
            if (!string.IsNullOrEmpty(ViewBag.Search))
            {
                <p>Không tìm thấy lớp học với từ khóa "<strong>@ViewBag.Search</strong>".</p>
            }
            else
            {
                <p>Không có lớp học nào.</p>
            }
        }
    </div>
    @await Html.PartialAsync("_ConfirmModal", new ConfirmModalViewModel
{
    ModalId = "confirmArchiveModal",
    Message = "Bạn có chắc muốn lưu trữ lớp học này?",
    ActionUrl = Url.Action("ArchiveCourse", "GiangVien"),
    DataId = 0 // tạm placeholder, gán bằng JS
})
    @await Html.PartialAsync("_ConfirmModal", new ConfirmModalViewModel
{
    ModalId = "confirmCopyModal",
    Message = "Bạn có muốn sao chép liên kết lớp học này không?",
    ActionUrl = "#", // Không submit thật
    DataId = 0,

})

    <div class="pagination">
        @if (Model.TotalPages > 1)
        {
            <ul class="pagination-list">
                @if (Model.HasPreviousPage)
                {
                    <li><a href="@Url.Action("Courses", new { page = Model.PageIndex - 1, search = ViewBag.Search })">← Trước</a></li>
                }
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    if (i == Model.PageIndex)
                    {
                        <li class="active">@i</li>
                    }
                    else
                    {
                        <li><a href="@Url.Action("Courses", new { page = i, search = ViewBag.Search })">@i</a></li>
                    }
                }
                @if (Model.HasNextPage)
                {
                    <li><a href="@Url.Action("Courses", new { page = Model.PageIndex + 1, search = ViewBag.Search })">Sau →</a></li>
                }
            </ul>
        }
    </div>
</div>

<script>
    function toggleCourseDropdown(button) {
        const menu = button.parentElement.querySelector('.dropdown-menu');
        const isShown = menu.classList.contains("show");

        document.querySelectorAll(".dropdown-menu.show").forEach(m => m.classList.remove("show"));

        if (!isShown) {
            menu.classList.add("show");
        }
    }

    document.addEventListener("click", function (e) {
        document.querySelectorAll(".dropdown-menu.show").forEach(menu => {
            if (!menu.contains(e.target) && !menu.previousElementSibling.contains(e.target)) {
                menu.classList.remove("show");
            }
        });
    });

    function showConfirmArchiveModal(courseId) {
        const modal = document.getElementById("confirmArchiveModal");
        const input = modal.querySelector("input[name='id']");
        input.value = courseId;
        modal.classList.add("show");

        modal.addEventListener("click", function (e) {
            if (e.target === modal) modal.classList.remove("show");
        });

        modal.querySelector(".cancel-btn").addEventListener("click", function () {
            modal.classList.remove("show");
        });
    }

        function showCopyLinkModal(link) {
        const modal = document.getElementById("confirmCopyModal");

        // Xóa sự kiện cũ tránh nhân bản submit
        const oldForm = modal.querySelector("form");
        const newForm = oldForm.cloneNode(true); // clone toàn bộ form
        oldForm.parentNode.replaceChild(newForm, oldForm); // thay thế form

        // Hiện modal
        modal.classList.add("show");

        // Nút xác nhận (SAO CHÉP)
        newForm.addEventListener("submit", function (e) {
            e.preventDefault();

            navigator.clipboard.writeText(link)
                .then(() => {
                    showToast("Đã sao chép liên kết lớp học!");
                    modal.classList.remove("show");
                })
                .catch((err) => {
                    showToast("Không thể sao chép: " + err, true);
                });
        });

        // Nút HỦY
        const cancelBtn = modal.querySelector(".cancel-btn");
        cancelBtn?.addEventListener("click", function () {
            modal.classList.remove("show");
        });

        // Bấm nền đen tắt modal
        modal.addEventListener("click", function (e) {
            if (e.target === modal) {
                modal.classList.remove("show");
            }
        });
    }


</script>

<div id="toast-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>

<script>
    function showToast(message, isError = false) {
        const toast = document.createElement('div');
        toast.textContent = message;
        toast.style.background = isError ? '#dc3545' : '#28a745';
        toast.style.color = '#fff';
        toast.style.padding = '10px 15px';
        toast.style.borderRadius = '5px';
        toast.style.marginBottom = '10px';
        toast.style.boxShadow = '0 0 5px rgba(0,0,0,0.2)';
        toast.style.transition = 'opacity 0.5s';

        const container = document.getElementById('toast-container');
        container.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 500);
        }, 2500);
    }
</script>
