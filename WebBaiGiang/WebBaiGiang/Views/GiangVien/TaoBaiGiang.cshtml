@model WebBaiGiang.ViewModel.BaiGiangCreateViewModel

@{
    Layout = null;
    ViewData["Title"] = "Tạo bài giảng mới";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation/1.19.3/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>


<div class="container mt-4">
    <h3>Tạo bài giảng mới</h3>

    <form asp-action="TaoBaiGiang" method="post" enctype="multipart/form-data">
        <div class="mb-3">
            <label asp-for="Title" class="form-label fw-bold">Tiêu đề *</label>
            <input asp-for="Title" class="form-control" placeholder="Nhập tiêu đề tài liệu" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label fw-bold">Mô tả (không bắt buộc)</label>
            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
        </div>

        <hr />
        <h5>Danh sách chương</h5>
        <div id="chapters-container"></div>
        <button type="button" class="btn btn-outline-primary mb-3" onclick="addChapter()">+ Thêm chương</button>

        <hr />
        <h5>Đính kèm</h5>
        <div class="mb-3 d-flex flex-wrap gap-3 align-items-center">
            <input asp-for="Attachment" type="file" class="form-control w-auto" />
            <span asp-validation-for="Attachment" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Dành cho lớp</label>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle text-start" type="button" id="classDropdownBtn" data-bs-toggle="dropdown" aria-expanded="false">
                    <span id="selectedClassesText">Chưa có lớp nào được chọn...</span>
                </button>
                <ul class="dropdown-menu p-2" aria-labelledby="classDropdownBtn" style=" max-height: 200px; overflow-y: auto;">
                    @if (Model.AvailableClasses != null && Model.AvailableClasses.Any())
                    {
                        @foreach (var item in Model.AvailableClasses)
                        {
                            <li>
                                <div class="form-check">
                                    <input class="form-check-input class-checkbox" type="checkbox"
                                           value="@item.Value"
                                           id="classCheckbox_@item.Value"
                                           name="SelectedClassIds" @(Model.SelectedClassIds != null && Model.SelectedClassIds.Contains(int.Parse(item.Value)) ? "checked" : "")>
                                    <label class="form-check-label" for="classCheckbox_@item.Value">
                                        @item.Text
                                    </label>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li><p class="text-muted ms-2">Không có lớp học nào khả dụng cho bạn.</p></li>
                    }
                </ul>
            </div>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-success">Đăng</button>
        </div>
    </form>
</div>

<script>
    // --- CONSTANTS & SELECTORS ---
    const CHAPTERS_CONTAINER = $('#chapters-container');
    const CLASS_CHECKBOX_SELECTOR = '.class-checkbox';
    const SELECTED_CLASSES_TEXT_SPAN = $('#selectedClassesText');
    const DROPDOWN_MENU_SELECTOR = '.dropdown-menu';
    const CHAPTER_ITEM_CLASS = 'chapter-item';
    const BAI_ITEM_CLASS = 'bai-item';
    const BAIS_CONTAINER_CLASS = 'lessons-container'; // Đổi tên cho nhất quán với HTML

    let chapterCount = 0; // Biến đếm số chương, dùng cho index của mảng

    // --- HELPER FUNCTIONS ---

    // Cập nhật text hiển thị lớp đã chọn
    function updateSelectedClassesDropdownText() {
        const selectedOptions = $(CLASS_CHECKBOX_SELECTOR + ':checked');
        if (selectedOptions.length === 0) {
            SELECTED_CLASSES_TEXT_SPAN.text('Chưa có lớp nào được chọn...');
        } else if (selectedOptions.length > 3) {
            SELECTED_CLASSES_TEXT_SPAN.text(`${selectedOptions.length} lớp đã chọn`);
        } else {
            const labels = selectedOptions.map(function() {
                return $(this).next('label').text();
            }).get();
            SELECTED_CLASSES_TEXT_SPAN.text(labels.join(', '));
        }
    }

    // Hàm tổng hợp để cập nhật lại tất cả các index
    function updateIndices() {
        const chapters = document.querySelectorAll("#chapters-container .chapter-item");
        chapters.forEach((chapterDiv, chapterIdx) => {
            // Cập nhật tiêu đề hiển thị của chương
            chapterDiv.querySelector('label.fw-bold').innerText = `Chương ${chapterIdx + 1}`;

            // Cập nhật name và data-valmsg-for của các input/textarea trong chương
            chapterDiv.querySelectorAll('[name^="Chuongs["]').forEach(input => {
                const oldName = input.name;
                const newName = oldName.replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIdx}]`);
                input.name = newName;
                if (input.dataset.valmsgFor) {
                    input.dataset.valmsgFor = input.dataset.valmsgFor.replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIdx}]`);
                }
            });

            // Cập nhật id của container bài học
            const lessonContainer = chapterDiv.querySelector(`.${BAIS_CONTAINER_CLASS}`);
            if (lessonContainer) {
                lessonContainer.id = `lessons-${chapterIdx}`;
            }

            // Cập nhật onclick của nút thêm bài học
            const addLessonButton = chapterDiv.querySelector('button[onclick^="addLesson("]');
            if (addLessonButton) {
                addLessonButton.setAttribute('onclick', `addLesson(${chapterIdx})`);
            }

            // Cập nhật name và data-valmsg-for của các input/textarea trong bài học của chương này
            const lessons = chapterDiv.querySelectorAll(`.${BAIS_CONTAINER_CLASS} .${BAI_ITEM_CLASS}`);
            lessons.forEach((lessonDiv, lessonIdx) => {
                lessonDiv.querySelector('label.fw-bold').innerText = `Bài học ${lessonIdx + 1}`;
                lessonDiv.querySelectorAll('[name^="Chuongs[' + chapterIdx + '].Bais["]').forEach(input => {
                    const oldName = input.name;
                    const newName = oldName
                        .replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIdx}]`)
                        .replace(/Bais\[\d+\]/, `Bais[${lessonIdx}]`);
                    input.name = newName;
                    if (input.dataset.valmsgFor) {
                        input.dataset.valmsgFor = input.dataset.valmsgFor
                            .replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIdx}]`)
                            .replace(/Bais\[\d+\]/, `Bais[${lessonIdx}]`);
                    }
                });
            });
        });
        chapterCount = chapters.length; // Cập nhật lại chapterCount sau khi sắp xếp
    }

    // Hàm để áp dụng lại validation cho các phần tử HTML mới được thêm vào
    function enableValidationForNewElements(containerElement) {
        // Loại bỏ validation cũ để tránh trùng lặp
        $('form').removeData('validator');
        $('form').removeData('unobtrusiveValidation');
        // Áp dụng lại validation cho toàn bộ form
        $.validator.unobtrusive.parse($('form'));
    }

    // --- DYNAMIC FORM FUNCTIONS ---

    // Thêm một chương mới
    window.addChapter = function() { // Sử dụng window.addChapter để đảm bảo có thể gọi từ onclick
        const container = document.getElementById("chapters-container");
        const chapterIdx = chapterCount; // Sử dụng chapterCount hiện tại làm index
        const chapterDiv = document.createElement("div");
        chapterDiv.classList.add("border", "p-3", "mb-3", CHAPTER_ITEM_CLASS); // Thêm class để dễ quản lý

        chapterDiv.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <label class="fw-bold">Chương ${chapterIdx + 1}</label>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeElement(this, '${CHAPTER_ITEM_CLASS}')">Xóa chương</button>
            </div>
            <input type="hidden" name="Chuongs[${chapterIdx}].Id" value="0" />
            <input type="text" name="Chuongs[${chapterIdx}].Title" class="form-control mb-2" placeholder="Tên chương" required />
            <span data-valmsg-for="Chuongs[${chapterIdx}].Title" class="text-danger"></span>
            <input type="number" name="Chuongs[${chapterIdx}].SortOrder" value="${chapterIdx + 1}" class="form-control mb-2" placeholder="Thứ tự" />


            <div id="lessons-${chapterIdx}" class="${BAIS_CONTAINER_CLASS} ms-3 border-start ps-3 mt-3">
                </div>
            <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="addLesson(${chapterIdx})">+ Thêm bài học</button>
        `;
        container.appendChild(chapterDiv);
        chapterCount++; // Tăng biến đếm sau khi thêm
        enableValidationForNewElements(chapterDiv); // Áp dụng validation cho phần tử mới
        updateIndices(); // Cập nhật lại tất cả các index
    }

    // Thêm một bài học mới vào một chương cụ thể
    window.addLesson = function(chapterIndex) { // Sử dụng window.addLesson để đảm bảo có thể gọi từ onclick
        const lessonContainer = document.getElementById(`lessons-${chapterIndex}`);
        const lessonIdx = lessonContainer.children.length; // Lấy index của bài học trong chương đó
        const lessonDiv = document.createElement("div");
        lessonDiv.classList.add("mt-2", "border", "p-2", BAI_ITEM_CLASS); // Thêm class để dễ quản lý

        lessonDiv.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <label class="fw-bold">Bài học ${lessonIdx + 1}</label>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeElement(this, '${BAI_ITEM_CLASS}')">Xóa bài học</button>
            </div>
            <input type="hidden" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].Id" value="0" />
            <input type="text" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].Title" class="form-control mb-1" placeholder="Tên bài học" required />
            <span data-valmsg-for="Chuongs[${chapterIndex}].Bais[${lessonIdx}].Title" class="text-danger"></span>
            <textarea name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].Description" class="form-control mb-1" placeholder="Mô tả bài học"></textarea>
            <input type="url" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].VideoUrl" class="form-control mb-1" placeholder="URL video (nếu có)" />
            <input type="file" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].DocumentFile" class="form-control mb-2" />
            <input type="number" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].SortOrder" value="${lessonIdx + 1}" class="form-control mb-1" placeholder="Thứ tự" />
        `;
        lessonContainer.appendChild(lessonDiv);
        enableValidationForNewElements(lessonDiv); // Áp dụng validation cho phần tử mới
        updateIndices(); // Cập nhật lại tất cả các index
    }

    // Hàm xóa phần tử (chương hoặc bài học)
    window.removeElement = function(button, className) { // Sử dụng window.removeElement để đảm bảo có thể gọi từ onclick
        $(button).closest(`.${className}`).remove();
        updateIndices(); // Sau khi xóa, cập nhật lại index
        enableValidationForNewElements(); // Áp dụng lại validation cho toàn bộ form
    }

    // Khởi tạo khi trang tải
    $(document).ready(function() {
        updateSelectedClassesDropdownText(); // Cập nhật trạng thái dropdown lớp khi tải trang
        $(CLASS_CHECKBOX_SELECTOR).on('change', updateSelectedClassesDropdownText); // Lắng nghe sự kiện thay đổi checkbox lớp

        // Ngăn chặn đóng dropdown khi click vào bên trong (trừ khi click vào checkbox)
        $(DROPDOWN_MENU_SELECTOR).on('click', function(e) {
            e.stopPropagation();
        });

        // Khởi tạo chapterCount dựa trên số chương hiện có (nếu có)
        // và cập nhật lại các index nếu trang tải với dữ liệu có sẵn
        chapterCount = $('#chapters-container').find(`.${CHAPTER_ITEM_CLASS}`).length;
        updateIndices(); // Gọi lần đầu để đảm bảo các index và label đúng
    });
</script>