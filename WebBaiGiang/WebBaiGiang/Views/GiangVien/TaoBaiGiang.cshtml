@model WebBaiGiang.ViewModel.BaiGiangCreateViewModel

@{
    Layout = null;
    ViewData["Title"] = "Tạo bài giảng mới";
}
<meta charset="utf-8" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation/1.19.3/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>


<div class="container mt-4">
    <h3>Tạo bài giảng mới</h3>

    <form asp-action="TaoBaiGiang" method="post" enctype="multipart/form-data">
        <div class="mb-3">
            <label asp-for="Title" class="form-label fw-bold">Tiêu đề *</label>
            <input asp-for="Title" class="form-control" placeholder="Nhập tiêu đề tài liệu" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label fw-bold">Mô tả (không bắt buộc)</label>
            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
        </div>

        <hr />
        <h5>Danh sách chương</h5>
        <div id="chapters-container"></div>
        <button type="button" class="btn btn-outline-primary mb-3" onclick="addChapter()">+ Thêm chương</button>

        <hr />
        <h5>Đính kèm</h5>
        <!-- Tải lên hình ảnh -->
        <div class="mb-3">
            <label class="form-label fw-bold">Tải lên hình ảnh</label>
            <div class="d-flex flex-wrap gap-3 align-items-center">
                <input asp-for="ImageFiles" type="file" class="form-control w-auto"
                       multiple accept="image/*"
                       onchange="previewFiles(this, 'imagePreview')" />
                <span asp-validation-for="ImageFiles" class="text-danger"></span>
            </div>
            <div id="imagePreview" class="d-flex flex-wrap gap-3 mt-2"></div>
        </div>

        <!-- Tải lên tài liệu -->
        <div class="mb-3">
            <label class="form-label fw-bold">Tải lên tài liệu</label>
            <div class="d-flex flex-wrap gap-3 align-items-center">
                <input asp-for="DocumentFiles" type="file" class="form-control w-auto"
                       multiple accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt"
                       onchange="previewFiles(this, 'fileNamePreview')" />
                <span asp-validation-for="DocumentFiles" class="text-danger"></span>
            </div>
            <div id="fileNamePreview" class="mt-2"></div>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Dành cho lớp</label>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle text-start" type="button" id="classDropdownBtn" data-bs-toggle="dropdown" aria-expanded="false">
                    <span id="selectedClassesText">Chưa có lớp nào được chọn...</span>
                </button>
                <ul class="dropdown-menu p-2" aria-labelledby="classDropdownBtn" style=" max-height: 200px; overflow-y: auto;">
                    @if (Model.AvailableClasses != null && Model.AvailableClasses.Any())
                    {
                        @foreach (var item in Model.AvailableClasses)
                        {
                            <li>
                                <div class="form-check">
                                    <input class="form-check-input class-checkbox" type="checkbox"
                                           value="@item.Value"
                                           id="classCheckbox_@item.Value"
                                           name="SelectedClassIds" @(Model.SelectedClassIds != null && Model.SelectedClassIds.Contains(int.Parse(item.Value)) ? "checked" : "")>
                                    <label class="form-check-label" for="classCheckbox_@item.Value">
                                        @item.Text
                                    </label>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li><p class="text-muted ms-2">Không có lớp học nào khả dụng cho bạn.</p></li>
                    }
                </ul>
            </div>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-success">Đăng</button>
        </div>
    </form>
</div>

<script>
    const CHAPTERS_CONTAINER = $('#chapters-container');
    const CLASS_CHECKBOX_SELECTOR = '.class-checkbox';
    const SELECTED_CLASSES_TEXT_SPAN = $('#selectedClassesText');
    const DROPDOWN_MENU_SELECTOR = '.dropdown-menu';
    const CHAPTER_ITEM_CLASS = 'chapter-item';
    const BAI_ITEM_CLASS = 'bai-item';
    const BAIS_CONTAINER_CLASS = 'lessons-container';

    let chapterCount = 0;

    function updateSelectedClassesDropdownText() {
        const selectedOptions = $(CLASS_CHECKBOX_SELECTOR + ':checked');
        if (selectedOptions.length === 0) {
            SELECTED_CLASSES_TEXT_SPAN.text('Chưa có lớp nào được chọn...');
        } else if (selectedOptions.length > 3) {
            SELECTED_CLASSES_TEXT_SPAN.text(`${selectedOptions.length} lớp đã chọn`);
        } else {
            const labels = selectedOptions.map(function () {
                return $(this).next('label').text();
            }).get();
            SELECTED_CLASSES_TEXT_SPAN.text(labels.join(', '));
        }
    }

    function updateIndices() {
        const chapters = document.querySelectorAll("#chapters-container .chapter-item");
        chapters.forEach((chapterDiv, chapterIdx) => {
            chapterDiv.querySelector('label.fw-bold').innerText = `Chương ${chapterIdx + 1}`;

            chapterDiv.querySelectorAll('[name^="Chuongs["]').forEach(input => {
                const newName = input.name.replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIdx}]`);
                input.name = newName;
                if (input.dataset.valmsgFor) {
                    input.dataset.valmsgFor = input.dataset.valmsgFor.replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIdx}]`);
                }
            });

            const lessonContainer = chapterDiv.querySelector(`.${BAIS_CONTAINER_CLASS}`);
            if (lessonContainer) {
                lessonContainer.id = `lessons-${chapterIdx}`;
            }

            const addLessonButton = chapterDiv.querySelector('button[onclick^="addLesson("]');
            if (addLessonButton) {
                addLessonButton.setAttribute('onclick', `addLesson(${chapterIdx})`);
            }

            const lessons = chapterDiv.querySelectorAll(`.${BAIS_CONTAINER_CLASS} .${BAI_ITEM_CLASS}`);
            lessons.forEach((lessonDiv, lessonIdx) => {
                lessonDiv.querySelector('label.fw-bold').innerText = `Bài học ${lessonIdx + 1}`;
                lessonDiv.querySelectorAll('[name^="Chuongs[' + chapterIdx + '].Bais["]').forEach(input => {
                    input.name = input.name
                        .replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIdx}]`)
                        .replace(/Bais\[\d+\]/, `Bais[${lessonIdx}]`);
                    if (input.dataset.valmsgFor) {
                        input.dataset.valmsgFor = input.dataset.valmsgFor
                            .replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIdx}]`)
                            .replace(/Bais\[\d+\]/, `Bais[${lessonIdx}]`);
                    }
                });

                // Cập nhật ID preview file nếu có
                const fileInput = lessonDiv.querySelector('input[type="file"]');
                if (fileInput) {
                    const newPreviewId = `preview-${chapterIdx}-${lessonIdx}`;
                    fileInput.setAttribute("onchange", `previewFiles(this, '${newPreviewId}')`);
                    let previewDiv = lessonDiv.querySelector('div[id^="preview-"]');
                    if (!previewDiv) {
                        previewDiv = document.createElement("div");
                        previewDiv.classList.add("mt-2");
                        lessonDiv.appendChild(previewDiv);
                    }
                    previewDiv.id = newPreviewId;
                }
            });
        });

        chapterCount = chapters.length;
    }

    function enableValidationForNewElements(containerElement) {
        $('form').removeData('validator');
        $('form').removeData('unobtrusiveValidation');
        $.validator.unobtrusive.parse($('form'));
    }

    window.addChapter = function () {
        const container = document.getElementById("chapters-container");
        const chapterIdx = chapterCount;
        const chapterDiv = document.createElement("div");
        chapterDiv.classList.add("border", "p-3", "mb-3", CHAPTER_ITEM_CLASS);

        chapterDiv.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <label class="fw-bold">Chương ${chapterIdx + 1}</label>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeElement(this, '${CHAPTER_ITEM_CLASS}')">Xóa chương</button>
            </div>
            <input type="hidden" name="Chuongs[${chapterIdx}].Id" value="0" />
            <input type="text" name="Chuongs[${chapterIdx}].Title" class="form-control mb-2" placeholder="Tên chương" required />
            <span data-valmsg-for="Chuongs[${chapterIdx}].Title" class="text-danger"></span>
            <input type="number" name="Chuongs[${chapterIdx}].SortOrder" value="${chapterIdx + 1}" class="form-control mb-2" placeholder="Thứ tự" />
            <div id="lessons-${chapterIdx}" class="${BAIS_CONTAINER_CLASS} ms-3 border-start ps-3 mt-3"></div>
            <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="addLesson(${chapterIdx})">+ Thêm bài học</button>
        `;
        container.appendChild(chapterDiv);
        chapterCount++;
        enableValidationForNewElements(chapterDiv);
        updateIndices();
    }

    window.addLesson = function (chapterIndex) {
        const lessonContainer = document.getElementById(`lessons-${chapterIndex}`);
        const lessonIdx = lessonContainer.querySelectorAll(`.${BAI_ITEM_CLASS}`).length;
        const previewId = `preview-${chapterIndex}-${lessonIdx}`;

        const lessonDiv = document.createElement("div");
        lessonDiv.classList.add("mt-2", "border", "p-2", BAI_ITEM_CLASS);

        lessonDiv.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <label class="fw-bold">Bài học ${lessonIdx + 1}</label>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeElement(this, '${BAI_ITEM_CLASS}')">Xóa bài học</button>
            </div>
            <input type="hidden" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].Id" value="0" />
            <input type="text" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].Title" class="form-control mb-1" placeholder="Tên bài học" required />
            <span data-valmsg-for="Chuongs[${chapterIndex}].Bais[${lessonIdx}].Title" class="text-danger"></span>
            <textarea name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].Description" class="form-control mb-1" placeholder="Mô tả bài học"></textarea>
            <input type="url" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].VideoUrl" class="form-control mb-1" placeholder="URL video (nếu có)" />
            <input type="file" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].DocumentFile" class="form-control mb-2"
                   onchange="previewFiles(this, '${previewId}')" />
            <div id="${previewId}" class="mt-2"></div>
            <input type="number" name="Chuongs[${chapterIndex}].Bais[${lessonIdx}].SortOrder" value="${lessonIdx + 1}" class="form-control mb-1" placeholder="Thứ tự" />
        `;

        lessonContainer.appendChild(lessonDiv);
        enableValidationForNewElements(lessonDiv);
        updateIndices();
    }

    window.removeElement = function (button, className) {
        $(button).closest(`.${className}`).remove();
        updateIndices();
        enableValidationForNewElements();
    }

    $(document).ready(function () {
        updateSelectedClassesDropdownText();
        $(CLASS_CHECKBOX_SELECTOR).on('change', updateSelectedClassesDropdownText);
        $(DROPDOWN_MENU_SELECTOR).on('click', function (e) {
            e.stopPropagation();
        });

        chapterCount = $('#chapters-container').find(`.${CHAPTER_ITEM_CLASS}`).length;
        updateIndices();
    });

    // 👉 Hàm xử lý preview file
    function previewFiles(input, previewContainerId) {
        const previewContainer = document.getElementById(previewContainerId);
        previewContainer.innerHTML = "";

        const files = input.files;
        if (!files || files.length === 0) return;

        Array.from(files).forEach(file => {
            const fileType = file.type;

            if (fileType.startsWith("image/")) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.style.maxWidth = "120px";
                    img.style.maxHeight = "120px";
                    img.classList.add("me-2", "mb-2", "border", "p-1");
                    previewContainer.appendChild(img);
                };
                reader.readAsDataURL(file);
            } else {
                const fileNameElement = document.createElement("p");
                fileNameElement.textContent = "📄 " + file.name;
                fileNameElement.classList.add("mb-1");
                previewContainer.appendChild(fileNameElement);
            }
        });
    }
</script>
<script>
    function previewFiles(input, previewId) {
        const previewContainer = document.getElementById(previewId);
        previewContainer.innerHTML = "";

        Array.from(input.files).forEach(file => {
            if (previewId === "imagePreview" && file.type.startsWith("image/")) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "img-thumbnail";
                    img.style.maxWidth = "120px";
                    img.style.maxHeight = "120px";
                    img.alt = file.name;
                    previewContainer.appendChild(img);
                };
                reader.readAsDataURL(file);
            } else {
                const span = document.createElement("div");
                span.textContent = "📄 " + file.name;
                previewContainer.appendChild(span);
            }
        });
    }
</script>
