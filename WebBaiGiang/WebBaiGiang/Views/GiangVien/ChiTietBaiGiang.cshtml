@model WebBaiGiang.ViewModel.ChiTietBaiGiangViewModel
@using System.Security.Claims
@using System.Web
@{
    ViewData["Title"] = "Chi tiết bài giảng";
    Layout = "~/Views/Shared/_LayoutGiangvien.cshtml";
    var taiNguyenAnh = Model.TaiNguyens?.Where(t => t.Loai == "image");
    var taiNguyenYoutube = Model.TaiNguyens?.Where(t => t.Loai == "youtube");
    var taiNguyenDocs = Model.TaiNguyens?.Where(t => t.Loai == "tailieu");
}
<!-- Font Awesome 6.x -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" integrity="sha512-..." crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdn.ckeditor.com/ckeditor5/39.0.1/classic/ckeditor.js"></script>
<link href="~/css/chitietbaigiang.css" rel="stylesheet" />
<div class="container-fluid mt-4">
        <div class="row">
            <!-- Sidebar mục lục -->
            <div class="col-lg-3 col-md-4 mb-4">
                <div class="sidebar-toc position-sticky" style="top: 100px;">
                    <h5 class="mb-3"><i class="fas fa-list-ul me-2"></i> Mục lục</h5>
                    <div class="input-group mb-2">
                        <input type="text" id="tocSearch" class="form-control form-control-sm" placeholder="Tìm chương, bài..." />
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                    </div>
                <div id="tocContent">
                    @if (Model.Chuongs?.Any() == true)
                    {
                        @foreach (var chuong in Model.Chuongs.OrderBy(c => c.SortOrder))
                        {
                            <div class="toc-chuong-wrapper mb-2">
                                <div class="toc-chuong fw-bold mb-1" data-search="@chuong.Title.ToLower()" data-chuong-id="@chuong.Id">
                                    Chương @chuong.SortOrder: @chuong.Title
                                </div>

                                @if (chuong.Bais?.Any() == true)
                                {
                                    foreach (var bai in chuong.Bais.OrderBy(b => b.SortOrder))
                                    {
                                        <div class="toc-item toc-lesson ms-3"
                                             data-target="lesson-@bai.Id"
                                             data-search="@bai.Title.ToLower()"
                                             data-chuong-id="@chuong.Id">
                                            @chuong.SortOrder.@bai.SortOrder @bai.Title
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-muted small ms-3">Chưa có bài học</div>
                                }
                            </div>
                        }

                    }
                </div>

                </div>
            </div>
        <!-- Nội dung bài giảng -->
        <div class="col-lg-9 col-md-9">
            <div class="card shadow-sm mb-4" id="info">
                <div class="card-header bg-primary text-white">
                    <h2 class="card-title mb-0">@Model.Title</h2>
                </div>
                <div class="lead text-muted mo-ta-noi-dung p-3">
                    @Html.Raw(Model.Description)
                </div>
            </div>
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4> Nội dung bài giảng</h4>
                <div class="d-inline-flex gap-2">
                    <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#modalThemChuong">
                        <i class="fas fa-plus me-1"></i> Thêm chương
                    </button>
                    <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modalThemBai">
                        <i class="fas fa-plus me-1"></i> Thêm bài
                    </button>
                </div>
            </div>

            <!-- Modal thêm chương -->
            <div class="modal fade" id="modalThemChuong" tabindex="-1" aria-labelledby="modalThemChuongLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <form id="formThemChuong">
                        @Html.AntiForgeryToken()
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Thêm chương mới</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <input type="text" name="title" id="chuongTitle" class="form-control" placeholder="Nhập tên chương" required />
                                <input type="hidden" name="baiGiangId" value="@Model.BaiGiang.Id" />
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Thêm</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <!-- Modal sửa chương -->
            <div class="modal fade" id="modalSuaChuong" tabindex="-1" aria-labelledby="modalSuaChuongLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <form id="formSuaChuong">
                        @Html.AntiForgeryToken()
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Sửa chương</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <input type="hidden" name="id" id="suaChuongId" />
                                <input type="text" name="title" id="suaChuongTitle" class="form-control" placeholder="Nhập tên chương" required />
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Modal thêm bài -->
            <div class="modal fade" id="modalThemBai" tabindex="-1" aria-labelledby="modalThemBaiLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <form id="formThemBai">
                        @Html.AntiForgeryToken()
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Thêm bài học mới</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-2">
                                    <label>Tên bài học</label>
                                    <input type="text" class="form-control" name="title" required />
                                </div>
                                <div class="mb-2">
                                    <label>Chọn chương</label>
                                    <select class="form-select" name="chuongId" required>
                                        @foreach (var chuong in Model.Chuongs.OrderBy(c => c.SortOrder))
                                        {
                                            <option value="@chuong.Id">Chương @chuong.SortOrder - @chuong.Title</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-2">
                                    <label>Mô tả</label>
                                    <textarea class="form-control" name="description" id="moTaThem" rows="3"></textarea>
                                </div>
                                <hr />
                                <h6>Thêm tài nguyên:</h6>
                                <div class="mb-2">
                                    <label>Ảnh</label>
                                    <input type="file" class="form-control" name="ImageFiles" accept="image/*" multiple />
                                </div>
                                <div class="mb-2">
                                    <label>Tài liệu (PDF, Word...)</label>
                                    <input type="file" class="form-control" name="DocumentFiles" accept=".pdf,.doc,.docx,.ppt,.pptx" multiple />
                                </div>
                                <div class="mb-2">
                                    <label>Link video YouTube</label>
                                    <input type="text" class="form-control" name="youtubeLinks" placeholder="Nhập link YouTube, cách nhau dấu phẩy" />
                                </div>

                                <input type="hidden" name="baiGiangId" value="@Model.BaiGiang.Id" />
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Thêm bài</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <!-- Modal sửa bài -->
            <div class="modal fade" id="modalSuaBai" tabindex="-1" aria-labelledby="modalSuaBaiLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <form id="formSuaBai" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Sửa bài học</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <input type="hidden" name="id" id="suaBaiId" />

                                <div class="mb-2">
                                    <label>Tên bài học</label>
                                    <input type="text" class="form-control" name="title" id="suaBaiTitle" required />
                                </div>

                                <div class="mb-2">
                                    <label>Mô tả</label>
                                    <textarea class="form-control" name="description" id="moTaSua" rows="3"></textarea>
                                </div>

                                <hr />
                                <h6>Cập nhật tài nguyên mới (tuỳ chọn):</h6>
                                <div class="mb-2">
                                    <label>Ảnh (thay thế)</label>
                                    <input type="file" class="form-control" name="images" accept="image/*" multiple />
                                </div>
                                <div class="mb-2">
                                    <label>Tài liệu (thay thế)</label>
                                    <input type="file" class="form-control" name="docs" accept=".pdf,.doc,.docx,.ppt,.pptx" multiple />
                                </div>
                                <div class="mb-2">
                                    <label>Link video YouTube (cách nhau dấu phẩy)</label>
                                    <input type="text" class="form-control" name="youtubeLinks" id="suaBaiYoutubeLinks" />
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="accordion mb-5" id="chaptersAccordion">
                @foreach (var chuong in Model.Chuongs.OrderBy(c => c.SortOrder))
                {
                    <div class="accordion-item mb-3">
                        <h2 class="accordion-header d-flex justify-content-between align-items-center" id="heading-@chuong.Id">
                            <div class="d-flex flex-grow-1 align-items-center">
                                <button class="accordion-button collapsed flex-grow-1" type="button"
                                        data-bs-toggle="collapse" data-bs-target="#collapse-@chuong.Id">
                                    <strong>Chương @chuong.SortOrder: @chuong.Title</strong>
                                </button>
                            </div>
                            <div class="btn-group ms-2 me-3">
                                <button type="button" class="btn btn-sm btn-outline-secondary btn-sua-chuong"
                                        data-id="@chuong.Id" data-title="@chuong.Title" title="Sửa chương">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger btn-xoa-chuong"
                                        data-id="@chuong.Id" title="Xoá chương">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </h2>


                        <div id="collapse-@chuong.Id" class="accordion-collapse collapse" data-bs-parent="#chaptersAccordion">
                            <div class="accordion-body px-4 pt-3 pb-0" id="chapter-@chuong.Id">
                                <div class="text-center text-muted py-3">Đang tải dữ liệu...</div>
                            </div>
                        </div>
                    </div>

                }
            </div>

            @await Html.PartialAsync("_TaiNguyenTongHop", new WebBaiGiang.ViewModel.TaiNguyenTongHopViewModel
       {
           Anh = taiNguyenAnh?.ToList(),
           Docs = taiNguyenDocs?.ToList(),
           YouTube = taiNguyenYoutube?.ToList()
       })
            <!-- Bình luận bài giảng -->
            <div class="comment-section mt-5" id="binhluan-section">
                <h5 class="mb-4">
                    <i class="fas fa-comments me-2"></i> Bình luận
                </h5>

                <!-- Form thêm bình luận -->
                <form asp-action="ThemBinhLuan" method="post" class="mb-4" onsubmit="setTimeout(loadBinhLuan, 500)">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="BaiGiangId" value="@Model.BaiGiang.Id" />
                    <div class="mb-3">
                        <textarea name="NoiDung" class="form-control" placeholder="Nhập bình luận của bạn..." rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-paper-plane me-2"></i> Gửi bình luận
                    </button>
                </form>

                <!-- Danh sách bình luận sẽ load vào đây -->
                <div id="binhluan-content" class="text-center text-muted py-4">
                    <i class="fas fa-spinner fa-spin fa-2x"></i>
                    <p>Đang tải bình luận...</p>
                </div>
            </div>

                <script>
                    function loadBinhLuan() {
                        const baiGiangId = @Model.BaiGiang.Id;
                        $("#binhluan-content").load(`/GiangVien/LoadBinhLuan?baiGiangId=${baiGiangId}`);
                    }

                    $(document).ready(function () {
                        loadBinhLuan();
                    });
                </script>



        </div>
    </div>
</div>

<script>
        document.addEventListener("DOMContentLoaded", () => {
        let loaded = false;

        const observer = new IntersectionObserver(async (entries) => {
            const entry = entries[0];
            if (entry.isIntersecting && !loaded) {
                loaded = true;

                try {
                    const res = await fetch(`/GiangVien/LoadBinhLuan?baiGiangId=${@Model.BaiGiang.Id}`);
                    const html = await res.text();
                    document.getElementById("binhluan-content").innerHTML = html;
                } catch (err) {
                    document.getElementById("binhluan-content").innerHTML = "<div class='text-danger'>Lỗi tải bình luận</div>";
                }
            }
        }, { threshold: 0.5 });

        const target = document.getElementById("binhluan-section");
        if (target) {
            observer.observe(target);
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Xử lý click vào mục lục bài học
        const tocItems = document.querySelectorAll('.toc-item');

        tocItems.forEach(item => {
            item.addEventListener('click', async function () {
                const targetId = this.dataset.target;
                const baiId = targetId.replace("lesson-", "");
                const chuongId = this.dataset.chuongId;

                const collapse = document.getElementById("collapse-" + chuongId);
                const container = document.getElementById("chapter-" + chuongId);

                let needWait = false;
                if (!collapse.classList.contains("show")) {
                    new bootstrap.Collapse(collapse, { toggle: true });
                    needWait = true;
                }

                // Đợi nội dung bài được load
                if (needWait) {
                    for (let i = 0; i < 20; i++) {
                        if (container.dataset.loaded === "true") break;
                        await new Promise(r => setTimeout(r, 100));
                    }
                }

                const target = document.getElementById(targetId);
                if (target) {
                    target.scrollIntoView({ behavior: "smooth", block: "start" });
                    target.classList.add("bg-warning", "bg-opacity-25");
                    setTimeout(() => target.classList.remove("bg-warning", "bg-opacity-25"), 2000);
                }
            });
        });

        // Tìm kiếm trong mục lục
        document.getElementById("tocSearch").addEventListener("input", function () {
            const keyword = this.value.toLowerCase().trim();

            document.querySelectorAll(".toc-chuong").forEach(chuong => {
                const chuongMatch = chuong.dataset.search.includes(keyword);
                let hasMatchInBai = false;

                const baiItems = chuong.nextElementSibling
                    ? chuong.nextElementSibling.querySelectorAll('.toc-item')
                    : [];

                baiItems.forEach(bai => {
                    const match = bai.dataset.search.includes(keyword);
                    bai.style.display = match ? '' : 'none';
                    if (match) hasMatchInBai = true;
                });

                chuong.style.display = (chuongMatch || hasMatchInBai) ? '' : 'none';
            });
        });
    });

    // Lazy-load bài khi mở chương
    document.addEventListener("shown.bs.collapse", async function (e) {
        const panel = e.target;
        const chuongId = panel.id.replace("collapse-", "");
        const container = document.getElementById("chapter-" + chuongId);

        if (!container.dataset.loaded) {
            try {
                const response = await fetch(`/GiangVien/LoadBaiByChuong?chuongId=${chuongId}`);
                const html = await response.text();
                container.innerHTML = html;
                container.setAttribute("data-loaded", "true");
            } catch (err) {
                container.innerHTML = "<div class='text-danger'>Lỗi tải bài học</div>";
            }
        }
    });

    // Xử lý xoá chương
    document.addEventListener("click", async function (e) {
        const btn = e.target.closest(".btn-xoa-chuong");
        if (btn) {
            const id = btn.dataset.id;
            if (confirm("Bạn có chắc muốn xoá chương này?")) {
                try {
                    const res = await fetch(`/GiangVien/XoaChuong?id=${id}`, {
                        method: "POST",
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        }
                    });

                    const data = await res.json();
                    if (data.success) {
                        alert("Đã xoá chương.");
                        location.reload();
                    } else {
                        alert("Lỗi: " + data.message);
                    }
                } catch (err) {
                    alert("Lỗi khi gửi yêu cầu.");
                    console.error(err);
                }
            }
        }
    });

    // Xử lý xoá bài
    document.addEventListener("click", async function (e) {
        const btn = e.target.closest(".btn-xoa-bai");
        if (btn) {
            const id = btn.dataset.id;
            if (confirm("Bạn có chắc muốn xoá bài này?")) {
                try {
                    const res = await fetch(`/GiangVien/XoaBai?id=${id}`, {
                        method: "POST",
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        }
                    });

                    const data = await res.json();
                    if (data.success) {
                        alert("Đã xoá bài.");
                        location.reload(); // Reload toàn bộ trang
                    } else {
                        alert("Lỗi: " + data.message);
                    }
                } catch (err) {
                    alert("Lỗi khi gửi yêu cầu.");
                    console.error(err);
                }
            }
        }
    });
    // Xu ly them chuong
             document.getElementById("formThemChuong").addEventListener("submit", async function (e) {
        e.preventDefault();
        const form = this;
        const formData = new FormData(form);

        try {
            const response = await fetch('/GiangVien/ThemChuong', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                alert("Đã thêm chương.");
                location.reload();
            } else {
                alert("Lỗi: " + result.message);
            }
        } catch (err) {
            console.error("Lỗi khi gửi request:", err);
            alert("Đã xảy ra lỗi.");
        }
    });
    // Thêm bài học
    document.getElementById("formThemBai").addEventListener("submit", async function (e) {
        e.preventDefault();

         const form = this;
        const formData = new FormData(this);

        try 
        {formData.set("description", editorThem.getData());
            const response = await fetch('/GiangVien/ThemBai', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                alert("Thêm bài học thành công!");
                location.reload();
            } else {
                alert("Lỗi: " + result.message);
            }
        } catch (err) {
            console.error("Lỗi khi gửi request:", err);
            alert("Đã xảy ra lỗi.");
        }
    });

    // Hiện modal sửa chương
    document.addEventListener("click", function (e) {
        const btn = e.target.closest(".btn-sua-chuong");
        if (btn) {
            document.getElementById("suaChuongId").value = btn.dataset.id;
            document.getElementById("suaChuongTitle").value = btn.dataset.title;

            const modal = new bootstrap.Modal(document.getElementById("modalSuaChuong"));
            modal.show();
        }
    });

    // Gửi request sửa chương
    document.getElementById("formSuaChuong").addEventListener("submit", async function (e) {
        e.preventDefault();
        const id = document.getElementById("suaChuongId").value;
        const title = document.getElementById("suaChuongTitle").value.trim();

        if (!title) {
            alert("Tên chương không được để trống.");
            return;
        }

        try {
            const response = await fetch('/GiangVien/SuaChuong', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ id, title })
            });

            const result = await response.json();
            if (result.success) {
                alert("Đã cập nhật chương.");
                location.reload();
            } else {
                alert("Lỗi: " + result.message);
            }
        } catch (err) {
            console.error("Lỗi khi gửi request:", err);
            alert("Đã xảy ra lỗi.");
        }
    });

    // Hiện modal sửa bài
    document.addEventListener("click", function (e) {
        const btn = e.target.closest(".btn-sua-bai");
        if (btn) {
            document.getElementById("suaBaiId").value = btn.dataset.id;
            document.getElementById("suaBaiTitle").value = btn.dataset.title;
            editorSua.setData(btn.dataset.description || "");
            document.getElementById("suaBaiYoutubeLinks").value = "";

            const modal = new bootstrap.Modal(document.getElementById("modalSuaBai"));
            modal.show();
        }
    });

    // Gửi request sửa bài
    document.getElementById("formSuaBai").addEventListener("submit", async function (e) {
        e.preventDefault();
        const formData = new FormData(this);

        try {
            formData.set("description", editorSua.getData());
            const response = await fetch('/GiangVien/SuaBai', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                alert("Đã cập nhật bài học.");
                location.reload();
            } else {
                alert("Lỗi: " + result.message);
            }
        } catch (err) {
            console.error("Lỗi khi gửi request:", err);
            alert("Đã xảy ra lỗi.");
        }
    });

     function showEditForm(id, content) {
        document.querySelectorAll('.edit-form').forEach(f => f.style.display = 'none');
        document.getElementById(`edit-form-${id}`).style.display = 'block';
        document.getElementById(`comment-content-${id}`).style.display = 'none';
    }

    function hideEditForm(id) {
        document.getElementById(`edit-form-${id}`).style.display = 'none';
        document.getElementById(`comment-content-${id}`).style.display = 'block';
    }
    
    let editorThem, editorSua;

    // Tạo editor cho "Thêm bài"
    ClassicEditor
        .create(document.querySelector('#moTaThem'), {
            ckfinder: {
                uploadUrl: '/GiangVien/UploadAnhCKEditor' // Action xử lý ảnh dán
            }
        })
        .then(editor => {
            editorThem = editor;
        })
        .catch(error => {
            console.error(error);
        });

    // Tạo editor cho "Sửa bài"
    ClassicEditor
        .create(document.querySelector('#moTaSua'), {
            ckfinder: {
                uploadUrl: '/GiangVien/UploadAnhCKEditor'
            }
        })
        .then(editor => {
            editorSua = editor;
        })
        .catch(error => {
            console.error(error);
        });
</script>



