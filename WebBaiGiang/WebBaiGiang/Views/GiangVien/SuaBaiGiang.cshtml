@model WebBaiGiang.ViewModel.BaiGiangEditViewModel
@{
    Layout = null;
    ViewData["Title"] = "Chỉnh sửa toàn bộ bài giảng";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>


<div class="container mt-4">
    <h3>Chỉnh sửa toàn bộ bài giảng</h3>

    <form asp-action="SuaBaiGiang" method="post" enctype="multipart/form-data">
        @* Đã sửa asp-action thành EditBaiGiang *@
        <input type="hidden" asp-for="Id" />

        <div class="mb-3">
            <label asp-for="Title" class="form-label fw-bold">Tiêu đề bài giảng *</label>
            <input asp-for="Title" class="form-control" placeholder="Nhập tiêu đề bài giảng" required />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label fw-bold">Mô tả bài giảng</label>
            <textarea asp-for="Description" class="form-control" rows="3" placeholder="Mô tả bài giảng"></textarea>
        </div>

        <hr />
        <h5>Đính kèm File bài giảng (file tổng thể của bài giảng, nếu có)</h5>
        <div class="mb-3 d-flex flex-wrap gap-3 align-items-center">
            <input asp-for="Attachment" type="file" class="form-control w-auto" />
            <span asp-validation-for="Attachment" class="text-danger"></span>
            @if (!string.IsNullOrEmpty(Model.ExistingAttachmentUrl))
            {
                <small class="text-muted">File hiện tại: <a href="@Model.ExistingAttachmentUrl" target="_blank">Xem file</a></small>
                <input type="hidden" name="ExistingAttachmentUrl" value="@Model.ExistingAttachmentUrl" />
            }
        </div>

        <hr />

       <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle text-start" type="button" id="classDropdownBtn" data-bs-toggle="dropdown" aria-expanded="false">
                <span id="selectedClassesText">Dành cho lớp...</span>
                </button>
                <ul class="dropdown-menu p-2" aria-labelledby="classDropdownBtn" style=" max-height: 200px; overflow-y: auto;">
                    @if (Model.AvailableClasses != null && Model.AvailableClasses.Any())
                    {
                        @foreach (var item in Model.AvailableClasses)
                        {
                            <li>
                                <div class="form-check">
                                    <input class="form-check-input class-checkbox" type="checkbox"
                                           value="@item.Value"
                                           id="classCheckbox_@item.Value"
                                           name="SelectedClassIds" @(Model.SelectedClassIds.Contains(int.Parse(item.Value)) ? "checked" : "")>
                                    <label class="form-check-label" for="classCheckbox_@item.Value">
                                        @item.Text
                                    </label>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li><p class="text-muted ms-2">Không có lớp học nào khả dụng cho bạn.</p></li>
                    }
                </ul>
            </div>


        <h4>Danh sách chương</h4>
        <div id="chapters-container">
            @for (int c = 0; c < Model.Chuongs.Count; c++)
            {
                <div class="border p-3 mb-4 chapter-item">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="fw-bold fs-5">Chương @(c + 1)</label>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeChapter(this)">Xóa chương</button>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Tiêu đề chương *</label>
                        <input type="text" name="Chuongs[@c].Title" value="@Model.Chuongs[c].Title" class="form-control" placeholder="Tên chương" required />
                    </div>
                    <input type="hidden" name="Chuongs[@c].Id" value="@Model.Chuongs[c].Id" />

                    <h5>Bài học trong chương</h5>
                    <div class="lessons-container">
                        @for (int l = 0; l < Model.Chuongs[c].Bais.Count; l++)
                        {
                            <div class="border p-2 mb-2 lesson-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <label class="fw-bold">Bài học @(l + 1)</label>
                                    <button type="button" class="btn btn-sm btn-danger" onclick="removeLesson(this)">Xóa bài học</button>
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">Tiêu đề bài học *</label>
                                    <input type="text" name="Chuongs[@c].Bais[@l].Title" value="@Model.Chuongs[c].Bais[l].Title" class="form-control" placeholder="Tên bài học" required />
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">Mô tả bài học</label>
                                    <textarea name="Chuongs[@c].Bais[@l].Description" class="form-control" rows="3">@Model.Chuongs[c].Bais[l].Description</textarea>
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">URL video (nếu có)</label>
                                    <input type="text" name="Chuongs[@c].Bais[@l].VideoUrl" value="@Model.Chuongs[c].Bais[l].VideoUrl" class="form-control" placeholder="URL video" />
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">Tài liệu đính kèm (cho bài học)</label>
                                    <input type="file" name="Chuongs[@c].Bais[@l].DocumentFile" class="form-control" />
                                    @if (!string.IsNullOrEmpty(Model.Chuongs[c].Bais[l].ExistingDocumentUrl))
                                    {
                                        <small class="text-muted">File hiện tại: <a href="@Model.Chuongs[c].Bais[l].ExistingDocumentUrl" target="_blank">Xem file</a></small>
                                        <input type="hidden" name="Chuongs[@c].Bais[@l].ExistingDocumentUrl" value="@Model.Chuongs[c].Bais[l].ExistingDocumentUrl" />
                                    }
                                </div>
                                <input type="hidden" name="Chuongs[@c].Bais[@l].Id" value="@Model.Chuongs[c].Bais[l].Id" /> @* THÊM: Để gửi ID bài học hiện có *@
                            </div>
                        }
                        <button type="button" class="btn btn-outline-primary btn-sm mb-3" onclick="addLesson(this)">+ Thêm bài học</button>
                    </div>
                </div>
            }
        </div>

        <button type="button" class="btn btn-outline-success mb-4" onclick="addChapter()">+ Thêm chương</button>

        <div class="mt-4">
            <button type="submit" class="btn btn-primary">Lưu toàn bộ bài giảng</button>
            <a href="@Url.Action("BaiGiang", "GiangVien")" class="btn btn-secondary">Hủy bỏ</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function() {
            // Ngăn dropdown đóng khi click vào checkbox
            $('.dropdown-menu').on('click', function(e) {
                e.stopPropagation();
            });

            // Cập nhật text hiển thị trên nút dropdown
            function updateSelectedClassesText() {
                const selectedTexts = [];
                $('.class-checkbox:checked').each(function() {
                    selectedTexts.push($(this).next('label').text().trim());
                });

                if (selectedTexts.length === 0) {
                    $('#selectedClassesText').text('Dành cho lớp...');
                } else {
                    $('#selectedClassesText').text(selectedTexts.join(', '));
                }
            }

            // Gắn sự kiện change cho tất cả các checkbox lớp
            $('.class-checkbox').on('change', updateSelectedClassesText);

            // Gọi lần đầu khi tải trang để hiển thị các lớp đã chọn (nếu có)
            updateSelectedClassesText();
        });
    </script>
}

<script>
    // Hàm này dùng để cập nhật lại các chỉ số (index) của các trường input
    // để Model Binder của ASP.NET Core có thể đọc chính xác danh sách.
    function reindexAll() {
        const chapters = document.querySelectorAll("#chapters-container .chapter-item");

        // Cập nhật lại số lượng chương toàn cục
        window.chapterCount = chapters.length;

        chapters.forEach((chapter, chapterIndex) => {
            // Cập nhật nhãn "Chương X"
            chapter.querySelector("label.fw-bold.fs-5").innerHTML = `Chương ${chapterIndex + 1}`;

            // Cập nhật thuộc tính 'name' cho các input của chương
            chapter.querySelectorAll("input, textarea").forEach(input => {
                if (input.name) {
                    input.name = input.name.replace(/Chuongs\[\d+\]/, `Chuongs[${chapterIndex}]`);
                }
            });

            const lessons = chapter.querySelectorAll(".lesson-item");
            lessons.forEach((lesson, lessonIndex) => {
                // Cập nhật nhãn "Bài học X"
                lesson.querySelector("label.fw-bold").innerHTML = `Bài học ${lessonIndex + 1}`;

                // Cập nhật thuộc tính 'name' cho các input của bài học
                lesson.querySelectorAll("input, textarea").forEach(input => {
                    if (input.name) {
                        input.name = input.name.replace(/\.Bais\[\d+\]/, `.Bais[${lessonIndex}]`);
                    }
                });
            });
        });
    }

    // Hàm thêm chương mới
    function addChapter() {
        const container = document.getElementById("chapters-container");
        const chapterIndex = container.querySelectorAll('.chapter-item').length;

        const chapterDiv = document.createElement("div");
        chapterDiv.classList.add("border", "p-3", "mb-4", "chapter-item");
        chapterDiv.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <label class="fw-bold fs-5">Chương ${chapterIndex + 1}</label>
                <button type="button" class="btn btn-sm btn-danger" onclick="removeChapter(this)">Xóa chương</button>
            </div>

            <div class="mb-3">
                <label class="form-label">Tiêu đề chương *</label>
                <input type="text" name="Chuongs[${chapterIndex}].Title" class="form-control" placeholder="Tên chương" required />
            </div>

            <div class="mb-3">
                <label class="form-label">Mô tả chương</label>
                <textarea name="Chuongs[${chapterIndex}].Description" class="form-control" rows="2"></textarea>
            </div>

            <input type="hidden" name="Chuongs[${chapterIndex}].Id" value="0" />

            <h5>Bài học trong chương</h5>
            <div class="lessons-container"></div>
            <button type="button" class="btn btn-outline-primary btn-sm mb-3" onclick="addLesson(this)">+ Thêm bài học</button>
        `;
        container.appendChild(chapterDiv);
    }

    // Hàm xóa chương
    function removeChapter(btn) {
        btn.closest(".chapter-item").remove();
        reindexAll(); // Gọi hàm reindex để cập nhật lại toàn bộ chỉ số
    }

    // Hàm thêm bài học mới
    function addLesson(btn) {
        const chapterItem = btn.closest('.chapter-item');
        const lessonsContainer = chapterItem.querySelector(".lessons-container");

        // Tìm chỉ số của chương và bài học
        const chapterIndex = Array.from(document.querySelectorAll('.chapter-item')).indexOf(chapterItem);
        const lessonIndex = lessonsContainer.querySelectorAll('.lesson-item').length;

        const lessonDiv = document.createElement("div");
        lessonDiv.classList.add("border", "p-2", "mb-2", "lesson-item");
        lessonDiv.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
                <label class="fw-bold">Bài học ${lessonIndex + 1}</label>
                <button type="button" class="btn btn-sm btn-danger" onclick="removeLesson(this)">Xóa bài học</button>
            </div>

            <div class="mb-2">
                <label class="form-label">Tiêu đề bài học *</label>
                <input type="text" name="Chuongs[${chapterIndex}].Bais[${lessonIndex}].Title" class="form-control" placeholder="Tên bài học" required />
            </div>

            <div class="mb-2">
                <label class="form-label">Mô tả bài học</label>
                <textarea name="Chuongs[${chapterIndex}].Bais[${lessonIndex}].Description" class="form-control" rows="3"></textarea>
            </div>

            <div class="mb-2">
                <label class="form-label">URL video (nếu có)</label>
                <input type="text" name="Chuongs[${chapterIndex}].Bais[${lessonIndex}].VideoUrl" class="form-control" placeholder="URL video" />
            </div>

            <div class="mb-2">
                <label class="form-label">Tài liệu đính kèm (cho bài học)</label>
                <input type="file" name="Chuongs[${chapterIndex}].Bais[${lessonIndex}].DocumentFile" class="form-control" />
            </div>

            <input type="hidden" name="Chuongs[${chapterIndex}].Bais[${lessonIndex}].Id" value="0" />
        `;
        lessonsContainer.appendChild(lessonDiv);
    }

    // Hàm xóa bài học
    function removeLesson(btn) {
        const chapterItem = btn.closest(".chapter-item");
        btn.closest(".lesson-item").remove();
        reindexAll();
    }
</script>